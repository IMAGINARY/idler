import{performance as t}from"universal-perf-hooks";import{EventEmitter as e}from"events";function i(t,e){return(i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function r(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function n(t,e,s){return(n=r()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var s=new(Function.bind.apply(t,n));return r&&i(s,r.prototype),s}).apply(null,arguments)}var s=setTimeout(function(){},0),o=function(){function t(t,e,i,r){var n=this;this.timeoutId=s,this.idle=t,this.repeat=e,this.func=i,this.timeoutDelay=r,this.args=[].slice.call(arguments,4),this.testTimeoutCb=function(){return n.testTimeout()},this.testTimeout()}var e=t.prototype;return e.reset=function(){clearTimeout(this.timeoutId),this.timeoutId=setTimeout(this.testTimeoutCb,this.timeoutDelay)},e.clear=function(){clearTimeout(this.timeoutId)},e.testTimeout=function(){var t=this.idle.getIdleTime();t>=this.timeoutDelay?(this.repeat&&this.reset(),this.func.apply(this,this.args)):this.timeoutId=setTimeout(this.testTimeoutCb,this.timeoutDelay-t)},t}();function u(){return t.now()}var c=function(t){var e,r;function s(){var e;return(e=t.call(this)||this).lastId=0,e.timers=new Map,e.lastEventTimestampMs=u(),e}r=t,(e=s).prototype=Object.create(r.prototype),e.prototype.constructor=e,i(e,r);var c=s.prototype;return c.setTimeout=function(t,e){this.lastId+=1;var i=this.lastId;return this.timers.set(i,n(o,[this,!1,t,e].concat([].slice.call(arguments,2)))),i},c.setInterval=function(t,e){this.lastId+=1;var i=this.lastId;return this.timers.set(i,n(o,[this,!0,t,e].concat([].slice.call(arguments,2)))),i},c.clearTimeout=function(t){var e=this.timers.get(t);void 0!==e&&e.clear(),this.timers.delete(t)},c.clearInterval=function(t){this.clearTimeout(t)},c.clear=function(){this.timers.forEach(function(t){return t.clear()}),this.timers.clear()},c.interrupt=function(){this.lastEventTimestampMs=Math.max(u(),this.lastEventTimestampMs),this.emit("interrupted")},c.getIdleTime=function(){return u()-this.lastEventTimestampMs},s}(e);export{c as Idler};
//# sourceMappingURL=idler.module.js.map
