{"version":3,"file":"idler.modern.js","sources":["../src/idle-timer.ts","../src/idler.ts"],"sourcesContent":["interface Idle {\n  interrupt(): void;\n  getIdleTime(): number;\n}\n\nconst dummyTimeoutId = setTimeout(() => {}, 0);\n\nexport default class IdleTimer {\n  protected idle: Idle;\n\n  protected repeat: boolean;\n\n  protected func: (...args: unknown[]) => void;\n\n  protected timeoutDelay: number;\n\n  protected args: unknown[];\n\n  protected timeoutId: ReturnType<typeof setTimeout> = dummyTimeoutId;\n\n  protected testTimeoutCb: () => void;\n\n  constructor(\n    idle: Idle,\n    repeat: boolean,\n    func: (...args: unknown[]) => void,\n    timeoutDelay: number,\n    ...args: unknown[]\n  ) {\n    this.idle = idle;\n    this.repeat = repeat;\n    this.func = func;\n    this.timeoutDelay = timeoutDelay;\n    this.args = args;\n    this.testTimeoutCb = () => this.testTimeout();\n    this.testTimeout();\n  }\n\n  reset(): void {\n    clearTimeout(this.timeoutId);\n    this.timeoutId = setTimeout(this.testTimeoutCb, this.timeoutDelay);\n  }\n\n  clear(): void {\n    clearTimeout(this.timeoutId);\n  }\n\n  protected testTimeout(): void {\n    const idleTime = this.idle.getIdleTime();\n    if (idleTime >= this.timeoutDelay) {\n      if (this.repeat) this.reset();\n      this.func(...this.args);\n    } else {\n      const idleTimeRemaining = this.timeoutDelay - idleTime;\n      this.timeoutId = setTimeout(this.testTimeoutCb, idleTimeRemaining);\n    }\n  }\n}\n","import { performance } from 'universal-perf-hooks';\nimport { EventEmitter } from 'events';\n\nimport IdleTimer from './idle-timer';\n\nfunction now(): number {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n  return performance.now() as number;\n}\n\nexport default class Idler extends EventEmitter {\n  protected lastId: number;\n\n  protected timers: Map<number, IdleTimer>;\n\n  protected lastEventTimestampMs: number;\n\n  constructor() {\n    super();\n    this.lastId = 0;\n    this.timers = new Map<number, IdleTimer>();\n    this.lastEventTimestampMs = now();\n  }\n\n  setTimeout(\n    func: (...args: unknown[]) => void,\n    timeoutDelay: number,\n    ...args: unknown[]\n  ): number {\n    this.lastId += 1;\n    const id = this.lastId;\n    this.timers.set(\n      id,\n      new IdleTimer(this, false, func, timeoutDelay, ...args)\n    );\n    return id;\n  }\n\n  setInterval(\n    func: (...args: unknown[]) => void,\n    timeoutDelay: number,\n    ...args: unknown[]\n  ): number {\n    this.lastId += 1;\n    const id = this.lastId;\n    this.timers.set(id, new IdleTimer(this, true, func, timeoutDelay, ...args));\n    return id;\n  }\n\n  clearTimeout(id: number): void {\n    const timer = this.timers.get(id);\n    if (typeof timer !== 'undefined') timer.clear();\n    this.timers.delete(id);\n  }\n\n  clearInterval(id: number): void {\n    this.clearTimeout(id);\n  }\n\n  clear(): void {\n    this.timers.forEach((timer) => timer.clear());\n    this.timers.clear();\n  }\n\n  interrupt(): void {\n    this.lastEventTimestampMs = Math.max(now(), this.lastEventTimestampMs);\n    this.emit('interrupted');\n  }\n\n  /**\n   * Return the time in ms since the last interruption of the idle state.\n   * @returns {number}\n   */\n  getIdleTime(): number {\n    return now() - this.lastEventTimestampMs;\n  }\n}\n\nexport { Idler };\n"],"names":["dummyTimeoutId","setTimeout","IdleTimer","constructor","idle","repeat","func","timeoutDelay","args","this","testTimeoutCb","testTimeout","reset","clearTimeout","timeoutId","clear","idleTime","getIdleTime","now","performance","Idler","EventEmitter","super","lastId","timers","Map","lastEventTimestampMs","id","set","setInterval","timer","get","delete","clearInterval","forEach","interrupt","Math","max","emit"],"mappings":"yFAKA,MAAMA,EAAiBC,WAAW,OAAU,SAEvBC,EAenBC,YACEC,EACAC,EACAC,EACAC,KACGC,GATKC,eAA2CT,EAWnDS,KAAKL,KAAOA,EACZK,KAAKJ,OAASA,EACdI,KAAKH,KAAOA,EACZG,KAAKF,aAAeA,EACpBE,KAAKD,KAAOA,EACZC,KAAKC,cAAgB,IAAMD,KAAKE,cAChCF,KAAKE,cAGPC,QACEC,aAAaJ,KAAKK,WAClBL,KAAKK,UAAYb,WAAWQ,KAAKC,cAAeD,KAAKF,cAGvDQ,QACEF,aAAaJ,KAAKK,WAGVH,cACR,MAAMK,EAAWP,KAAKL,KAAKa,cACvBD,GAAYP,KAAKF,cACfE,KAAKJ,QAAQI,KAAKG,QACtBH,KAAKH,QAAQG,KAAKD,OAGlBC,KAAKK,UAAYb,WAAWQ,KAAKC,cADPD,KAAKF,aAAeS,IChDpD,SAASE,IAEP,OAAOC,EAAYD,YAGAE,UAAcC,EAOjClB,cACEmB,QACAb,KAAKc,OAAS,EACdd,KAAKe,OAAS,IAAIC,IAClBhB,KAAKiB,qBAAuBR,IAG9BjB,WACEK,EACAC,KACGC,GAEHC,KAAKc,QAAU,EACf,MAAMI,EAAKlB,KAAKc,OAKhB,OAJAd,KAAKe,OAAOI,IACVD,EACA,IAAIzB,EAAUO,MAAM,EAAOH,EAAMC,KAAiBC,IAE7CmB,EAGTE,YACEvB,EACAC,KACGC,GAEHC,KAAKc,QAAU,EACf,MAAMI,EAAKlB,KAAKc,OAEhB,OADAd,KAAKe,OAAOI,IAAID,EAAI,IAAIzB,EAAUO,MAAM,EAAMH,EAAMC,KAAiBC,IAC9DmB,EAGTd,aAAac,GACX,MAAMG,EAAQrB,KAAKe,OAAOO,IAAIJ,QACT,IAAVG,GAAuBA,EAAMf,QACxCN,KAAKe,OAAOQ,OAAOL,GAGrBM,cAAcN,GACZlB,KAAKI,aAAac,GAGpBZ,QACEN,KAAKe,OAAOU,QAASJ,GAAUA,EAAMf,SACrCN,KAAKe,OAAOT,QAGdoB,YACE1B,KAAKiB,qBAAuBU,KAAKC,IAAInB,IAAOT,KAAKiB,sBACjDjB,KAAK6B,KAAK,eAOZrB,cACE,OAAOC,IAAQT,KAAKiB"}