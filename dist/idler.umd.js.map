{"version":3,"file":"idler.umd.js","sources":["../src/idle-timer.ts","../src/idler.ts"],"sourcesContent":["interface Idle {\n  interrupt(): void;\n  getIdleTime(): number;\n}\n\nconst dummyTimeoutId = setTimeout(() => {}, 0);\n\nexport default class IdleTimer {\n  protected idle: Idle;\n\n  protected repeat: boolean;\n\n  protected func: (...args: unknown[]) => void;\n\n  protected timeoutDelay: number;\n\n  protected args: unknown[];\n\n  protected timeoutId: ReturnType<typeof setTimeout> = dummyTimeoutId;\n\n  protected testTimeoutCb: () => void;\n\n  constructor(\n    idle: Idle,\n    repeat: boolean,\n    func: (...args: unknown[]) => void,\n    timeoutDelay: number,\n    ...args: unknown[]\n  ) {\n    this.idle = idle;\n    this.repeat = repeat;\n    this.func = func;\n    this.timeoutDelay = timeoutDelay;\n    this.args = args;\n    this.testTimeoutCb = () => this.testTimeout();\n    this.testTimeout();\n  }\n\n  reset(): void {\n    clearTimeout(this.timeoutId);\n    this.timeoutId = setTimeout(this.testTimeoutCb, this.timeoutDelay);\n  }\n\n  clear(): void {\n    clearTimeout(this.timeoutId);\n  }\n\n  protected testTimeout(): void {\n    const idleTime = this.idle.getIdleTime();\n    if (idleTime >= this.timeoutDelay) {\n      if (this.repeat) this.reset();\n      this.func(...this.args);\n    } else {\n      const idleTimeRemaining = this.timeoutDelay - idleTime;\n      this.timeoutId = setTimeout(this.testTimeoutCb, idleTimeRemaining);\n    }\n  }\n}\n","import { performance } from 'universal-perf-hooks';\nimport { EventEmitter } from 'events';\n\nimport IdleTimer from './idle-timer';\n\nfunction now(): number {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n  return performance.now() as number;\n}\n\nexport default class Idler extends EventEmitter {\n  protected lastId: number;\n\n  protected timers: Map<number, IdleTimer>;\n\n  protected lastEventTimestampMs: number;\n\n  constructor() {\n    super();\n    this.lastId = 0;\n    this.timers = new Map<number, IdleTimer>();\n    this.lastEventTimestampMs = now();\n  }\n\n  setTimeout(\n    func: (...args: unknown[]) => void,\n    timeoutDelay: number,\n    ...args: unknown[]\n  ): number {\n    this.lastId += 1;\n    const id = this.lastId;\n    this.timers.set(\n      id,\n      new IdleTimer(this, false, func, timeoutDelay, ...args)\n    );\n    return id;\n  }\n\n  setInterval(\n    func: (...args: unknown[]) => void,\n    timeoutDelay: number,\n    ...args: unknown[]\n  ): number {\n    this.lastId += 1;\n    const id = this.lastId;\n    this.timers.set(id, new IdleTimer(this, true, func, timeoutDelay, ...args));\n    return id;\n  }\n\n  clearTimeout(id: number): void {\n    const timer = this.timers.get(id);\n    if (typeof timer !== 'undefined') timer.clear();\n    this.timers.delete(id);\n  }\n\n  clearInterval(id: number): void {\n    this.clearTimeout(id);\n  }\n\n  clear(): void {\n    this.timers.forEach((timer) => timer.clear());\n    this.timers.clear();\n  }\n\n  interrupt(): void {\n    this.lastEventTimestampMs = Math.max(now(), this.lastEventTimestampMs);\n    this.emit('interrupted');\n  }\n\n  /**\n   * Return the time in ms since the last interruption of the idle state.\n   * @returns {number}\n   */\n  getIdleTime(): number {\n    return now() - this.lastEventTimestampMs;\n  }\n}\n\nexport { Idler };\n"],"names":["dummyTimeoutId","setTimeout","IdleTimer","idle","repeat","func","timeoutDelay","this","args","testTimeoutCb","_this","testTimeout","reset","clearTimeout","timeoutId","clear","idleTime","getIdleTime","now","performance","lastId","timers","Map","lastEventTimestampMs","id","set","setInterval","timer","get","clearInterval","forEach","interrupt","Math","max","emit","EventEmitter"],"mappings":"q2BAKA,IAAMA,EAAiBC,WAAW,aAAU,GAEvBC,aAenB,WACEC,EACAC,EACAC,EACAC,cARQC,eAA2CP,EAWnDO,KAAKJ,KAAOA,EACZI,KAAKH,OAASA,EACdG,KAAKF,KAAOA,EACZE,KAAKD,aAAeA,EACpBC,KAAKC,gCACLD,KAAKE,cAAgB,kBAAMC,EAAKC,eAChCJ,KAAKI,yCAGPC,MAAA,WACEC,aAAaN,KAAKO,WAClBP,KAAKO,UAAYb,WAAWM,KAAKE,cAAeF,KAAKD,iBAGvDS,MAAA,WACEF,aAAaN,KAAKO,cAGVH,YAAA,WACR,IAAMK,EAAWT,KAAKJ,KAAKc,cACvBD,GAAYT,KAAKD,cACfC,KAAKH,QAAQG,KAAKK,QACtBL,KAAKF,gBAAQE,KAAKC,OAGlBD,KAAKO,UAAYb,WAAWM,KAAKE,cADPF,KAAKD,aAAeU,SChDpD,SAASE,IAEP,OAAOC,cAAYD,kCAUnB,0BACER,sBACKU,OAAS,EACdV,EAAKW,OAAS,IAAIC,IAClBZ,EAAKa,qBAAuBL,iHAG9BjB,WAAA,SACEI,EACAC,GAGAC,KAAKa,QAAU,EACf,IAAMI,EAAKjB,KAAKa,OAKhB,OAJAb,KAAKc,OAAOI,IACVD,IACItB,GAAUK,MAAM,EAAOF,EAAMC,wCAE5BkB,KAGTE,YAAA,SACErB,EACAC,GAGAC,KAAKa,QAAU,EACf,IAAMI,EAAKjB,KAAKa,OAEhB,OADAb,KAAKc,OAAOI,IAAID,IAAQtB,GAAUK,MAAM,EAAMF,EAAMC,wCAC7CkB,KAGTX,aAAA,SAAaW,GACX,IAAMG,EAAQpB,KAAKc,OAAOO,IAAIJ,QACT,IAAVG,GAAuBA,EAAMZ,QACxCR,KAAKc,cAAcG,MAGrBK,cAAA,SAAcL,GACZjB,KAAKM,aAAaW,MAGpBT,MAAA,WACER,KAAKc,OAAOS,QAAQ,SAACH,UAAUA,EAAMZ,UACrCR,KAAKc,OAAON,WAGdgB,UAAA,WACExB,KAAKgB,qBAAuBS,KAAKC,IAAIf,IAAOX,KAAKgB,sBACjDhB,KAAK2B,KAAK,kBAOZjB,YAAA,WACE,OAAOC,IAAQX,KAAKgB,yBAhEWY"}